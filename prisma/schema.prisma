// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

/// ─────────────────────────────────────────
//  client and database source
/// ─────────────────────────────────────────
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// ─────────────────────────────────────────
//  ISM Controls
/// ─────────────────────────────────────────

model Guideline {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  sections  Section[]

  
  @@map("Guideline")
}

model Section {
  id           Int        @id @default(autoincrement())
  title        String
  guidelineId  Int
  guideline    Guideline  @relation(fields: [guidelineId], references: [id])
  topics       Topic[]


  @@index([guidelineId])
  @@unique([title, guidelineId])
  @@map("Section")
}

model Topic {
  id         Int       @id @default(autoincrement())
  title      String
  sectionId  Int
  section    Section   @relation(fields: [sectionId], references: [id])
  controls   Control[]


  @@index([sectionId])
  @@unique([title, sectionId]) 
  @@map("Topic")
}

model Control {
  identifier   String   @id
  revision     Int?
  updatedRaw   String?
  description  String
  /* Applicability flags */
  NC           Boolean   @default(false)
  OS           Boolean   @default(false)
  P            Boolean   @default(false)
  S            Boolean   @default(false)
  TS           Boolean   @default(false)
  /* Essential Eight maturity flags */
  ML1          Boolean   @default(false)
  ML2          Boolean   @default(false)
  ML3          Boolean   @default(false)

  topicId      Int
  topic        Topic     @relation(fields: [topicId], references: [id])

  lastSynced   DateTime  @default(now())

  @@index([topicId])
  @@map("Control")
}

/// ─────────────────────────────────────────
//  Risk Register
/// ─────────────────────────────────────────

/// How the risk will be handled
enum RiskResponse {
  MITIGATE
  ACCEPT
  AVOID
  TRANSFER
}

/// Where the risk sits in its lifecycle
enum RiskStatus {
  OPEN
  IN_PROGRESS
  ACCEPTED
  CLOSED
}

/// Frequency with which the risk is reviewed
enum ReviewFrequency {
  MONTHLY
  QUARTERLY
  BI_ANNUAL
  ANNUAL
}

/// Status of an individual treatment action
enum TreatmentStatus {
  PENDING
  GREEN
  AMBER
  RED
  COMPLETED
}

/// Type of link between a risk and a control
enum ControlRelationType {
  MITIGATES
  GAP
}

/// Which control framework a Control record belongs to
enum ControlFramework {
  ISM
  PSPF
  ESSENTIAL_EIGHT
}

/// ------------------------
/// Reference Tables
/// ------------------------

model RiskCategory {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?
  risks       Risk[]
}

model Likelihood {
  id           Int    @id
  name         String @unique       // e.g. "Rare"
  numericValue Int                // e.g. 1
  description  String?
  // used in Risk and RiskMatrix
}

model Consequence {
  id           Int    @id
  name         String @unique       // e.g. "Minor"
  numericValue Int                // e.g. 2
  description  String?
  // used in Risk and RiskMatrix
}

model RiskLevel {
  id          Int    @id
  name        String @unique      // e.g. "Low", "Medium", "High", "Extreme"
  rank        Int               // for sorting or comparison
  color       String?           // e.g. "#FF0000"
  // used in Risk and RiskMatrix
}

/// Matrix mapping each likelihood×consequence to a risk level
model RiskMatrix {
  likelihood    Likelihood  @relation(fields: [likelihoodId], references: [id])
  likelihoodId  Int
  consequence   Consequence @relation(fields: [consequenceId], references: [id])
  consequenceId Int
  riskLevel     RiskLevel   @relation(fields: [riskLevelId], references: [id])
  riskLevelId   Int

  @@id([likelihoodId, consequenceId])
}

/// ------------------------
/// Core Tables
/// ------------------------

model Control {
  id          Int                @id @default(autoincrement())
  framework   ControlFramework
  code        String             // e.g. "AC-7", "Policy 10.1"
  title       String
  description String?
  risks       RiskControl[]
}

/// Join table linking Risks ↔ Controls
model RiskControl {
  risk           Risk     @relation(fields: [riskId], references: [id])
  riskId         Int
  control        Control  @relation(fields: [controlId], references: [id])
  controlId      Int
  relationType   ControlRelationType?

  @@id([riskId, controlId])
}

/// Individual risk treatment actions
model RiskTreatment {
  id            Int             @id @default(autoincrement())
  risk          Risk            @relation(fields: [riskId], references: [id])
  riskId        Int
  description   String
  owner         String          // person or role responsible
  targetDate    DateTime?
  status        TreatmentStatus @default(NOT_STARTED)
  completedDate DateTime?
}

/// The primary Risk entity
model Risk {
  id                     Int              @id @default(autoincrement())
  title                  String
  description            String
  category               RiskCategory     @relation(fields: [categoryId], references: [id])
  categoryId             Int

  // Inherent (pre-control) assessment
  inherentLikelihood     Likelihood       @relation("InherentLikely", fields: [inherentLikelihoodId], references: [id])
  inherentLikelihoodId   Int
  inherentConsequence    Consequence      @relation("InherentConsequ", fields: [inherentConsequenceId], references: [id])
  inherentConsequenceId  Int
  inherentRiskLevel      RiskLevel        @relation("InherentLevel", fields: [inherentRiskLevelId], references: [id])
  inherentRiskLevelId    Int

  // Residual (post-control) assessment
  residualLikelihood     Likelihood       @relation("ResidualLikely", fields: [residualLikelihoodId], references: [id])
  residualLikelihoodId   Int
  residualConsequence    Consequence      @relation("ResidualConsequ", fields: [residualConsequenceId], references: [id])
  residualConsequenceId  Int
  residualRiskLevel      RiskLevel        @relation("ResidualLevel", fields: [residualRiskLevelId], references: [id])
  residualRiskLevelId    Int

  // Risk response & status
  riskResponse           RiskResponse
  status                 RiskStatus       @default(OPEN)

  // Review scheduling
  reviewFrequency        ReviewFrequency?
  nextReviewDate         DateTime?
  lastReviewDate         DateTime?

  // Ownership & metadata
  riskOwner              String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  // Relations
  treatments             RiskTreatment[]
  riskControls           RiskControl[]
}

/// ------------------------
/// Optional: Person/User
/// ------------------------

// If you later want to formalise owners, etc.
// model Person {
//   id        Int     @id @default(autoincrement())
//   name      String
//   email     String  @unique
//   risks     Risk[]  @relation("Owner", fields: [/*...*/], references: [id])
// }
